// Generated by gencpp from file task_planner/Give_Array.msg
// DO NOT EDIT!


#ifndef TASK_PLANNER_MESSAGE_GIVE_ARRAY_H
#define TASK_PLANNER_MESSAGE_GIVE_ARRAY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/MultiArrayLayout.h>

namespace task_planner
{
template <class ContainerAllocator>
struct Give_Array_
{
  typedef Give_Array_<ContainerAllocator> Type;

  Give_Array_()
    : layout()
    , data()  {
    }
  Give_Array_(const ContainerAllocator& _alloc)
    : layout(_alloc)
    , data(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::MultiArrayLayout_<ContainerAllocator>  _layout_type;
  _layout_type layout;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _data_type;
  _data_type data;





  typedef boost::shared_ptr< ::task_planner::Give_Array_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::task_planner::Give_Array_<ContainerAllocator> const> ConstPtr;

}; // struct Give_Array_

typedef ::task_planner::Give_Array_<std::allocator<void> > Give_Array;

typedef boost::shared_ptr< ::task_planner::Give_Array > Give_ArrayPtr;
typedef boost::shared_ptr< ::task_planner::Give_Array const> Give_ArrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::task_planner::Give_Array_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::task_planner::Give_Array_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace task_planner

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'task_planner': ['/home/dave/LogisticAgent_ws/src/task_planner/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::task_planner::Give_Array_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::task_planner::Give_Array_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::task_planner::Give_Array_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::task_planner::Give_Array_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::task_planner::Give_Array_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::task_planner::Give_Array_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::task_planner::Give_Array_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1d99f79f8b325b44fee908053e9c945b";
  }

  static const char* value(const ::task_planner::Give_Array_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1d99f79f8b325b44ULL;
  static const uint64_t static_value2 = 0xfee908053e9c945bULL;
};

template<class ContainerAllocator>
struct DataType< ::task_planner::Give_Array_<ContainerAllocator> >
{
  static const char* value()
  {
    return "task_planner/Give_Array";
  }

  static const char* value(const ::task_planner::Give_Array_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::task_planner::Give_Array_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/MultiArrayLayout layout\n\
int32[] data\n\
================================================================================\n\
MSG: std_msgs/MultiArrayLayout\n\
# The multiarray declares a generic multi-dimensional array of a\n\
# particular data type.  Dimensions are ordered from outer most\n\
# to inner most.\n\
\n\
MultiArrayDimension[] dim # Array of dimension properties\n\
uint32 data_offset        # padding elements at front of data\n\
\n\
# Accessors should ALWAYS be written in terms of dimension stride\n\
# and specified outer-most dimension first.\n\
# \n\
# multiarray(i,j,k) = data[data_offset + dim_stride[1]*i + dim_stride[2]*j + k]\n\
#\n\
# A standard, 3-channel 640x480 image with interleaved color channels\n\
# would be specified as:\n\
#\n\
# dim[0].label  = \"height\"\n\
# dim[0].size   = 480\n\
# dim[0].stride = 3*640*480 = 921600  (note dim[0] stride is just size of image)\n\
# dim[1].label  = \"width\"\n\
# dim[1].size   = 640\n\
# dim[1].stride = 3*640 = 1920\n\
# dim[2].label  = \"channel\"\n\
# dim[2].size   = 3\n\
# dim[2].stride = 3\n\
#\n\
# multiarray(i,j,k) refers to the ith row, jth column, and kth channel.\n\
\n\
================================================================================\n\
MSG: std_msgs/MultiArrayDimension\n\
string label   # label of given dimension\n\
uint32 size    # size of given dimension (in type units)\n\
uint32 stride  # stride of given dimension\n\
";
  }

  static const char* value(const ::task_planner::Give_Array_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::task_planner::Give_Array_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.layout);
      stream.next(m.data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Give_Array_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::task_planner::Give_Array_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::task_planner::Give_Array_<ContainerAllocator>& v)
  {
    s << indent << "layout: ";
    s << std::endl;
    Printer< ::std_msgs::MultiArrayLayout_<ContainerAllocator> >::stream(s, indent + "  ", v.layout);
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.data[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // TASK_PLANNER_MESSAGE_GIVE_ARRAY_H
